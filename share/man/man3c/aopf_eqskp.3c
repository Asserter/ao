'\" te
.\" بسم الله
.\" Copyright (c) 2022, Asserter, Org. All Rights Reserved.
.TH aopf_eqskp 3c "15 Nov 2022" "SunOS 5.11" "C Library Functions"
.SH NAME
aopf_xx_eqskp \- assert operation for equality or format and skip
.SH SYNOPSIS
.LP
.nf
#include <ao/aopf.h>

\fBaop_t\fR \fBaopf_bool_eqskp\fR(\fBbool\fR \fIexpected\fR, \fBbool\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_char_eqskp\fR(\fBchar\fR \fIexpected\fR, \fBchar\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_shrt_eqskp\fR(\fBshort\fR \fIexpected\fR, \fBshort\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_int_eqskp\fR(\fBint\fR \fIexpected\fR, \fBint\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_long_eqskp\fR(\fBlong\fR \fIexpected\fR, \fBlong\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_llong_eqskp\fR(\fBlong long\fR \fIexpected\fR, \fBlong long\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_uchar_eqskp\fR(\fBunsigned char\fR \fIexpected\fR, \fBunsigned char\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ushrt_eqskp\fR(\fBunsigned short\fR \fIexpected\fR, \fBunsigned short\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_uint_eqskp\fR(\fBunsigned int\fR \fIexpected\fR, \fBunsigned int\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);

.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ulong_eqskp\fR(\fBunsigned long\fR \fIexpected\fR, \fBunsigned long\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ullong_eqskp\fR(\fBunsigned long long\fR \fIexpected\fR, \fBunsigned long long\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_size_eqskp\fR(\fBsize_t\fR \fIexpected\fR, \fBsize_t\fR \fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_flt_eqskp\fR(\fBfloat\fR \fIexpected\fR, \fBfloat\fR \fIactual\fR, \fBfloat\fR \fIreltol\fR, \fBfloat\fR \fIabstol\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);

.fi

.LP
.nf
\fBaop_t\fR \fBaopf_dbl_eqskp\fR(\fBdouble\fR \fIexpected\fR, \fBdouble\fR \fIactual\fR, \fBdouble\fR \fIreltol\fR, \fBdouble\fR \fIabstol\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);

.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ldbl_eqskp\fR(\fBlong double\fR \fIexpected\fR, \fBlong double\fR \fIactual\fR,
	\fBlong double\fR \fIreltol\fR, \fBlong double\fR \fIabstol\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);

.fi

.LP
.nf
\fBaop_t\fR \fBaopf_str_eqskp\fR(\fBconst char *\fR\fIexpected\fR, \fBconst char *\fR\fIactual\fR, \fBconst char *\fR\fIfmt\fR,
	\fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_mem_eqskp\fR(\fBconst void *\fR\fIexpected\fR, \fBconst void *\fR\fIactual\fR, \fBsize_t\fR \fIn\fR, \fBsize_t\fR \fIsize\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBaopf_xx_eqskp()\fR functions assert the \fIexpected\fR and \fIactual\fR arguments for equality. If equality fails then the functions place the \fIexpected\fR and \fIactual\fR values and the formatted output \fIfmt\fR on the standard error stream \fBstderr\fR and the assert operation is skipped.

.sp
.LP
The \fBaopf_bool_eqskp()\fR function asserts \fIexpected\fR and \fIactual\fR boolean values for equality.

.sp
.LP
The \fBaopf_char_eqskp()\fR and \fBaopf_uchar_eqskp()\fR functions assert \fIexpected\fR and \fIactual\fR characters for equality.

.sp
.LP
The \fBaopf_shrt_eqskp()\fR, \fBaopf_int_eqskp()\fR, \fBaopf_long_eqskp()\fR, \fBaopf_llong_eqskp()\fR, \fBaopf_ushrt_eqskp()\fR, \fBaopf_uint_eqskp()\fR, \fBaopf_ulong_eqskp()\fR, \fBaopf_ullong_eqskp()\fR and \fBaopf_size_eqskp()\fR functions assert \fIexpected\fR and \fIactual\fR integer numbers for equality.

.sp
.LP
The \fBaopf_flt_eqskp()\fR, \fBaopf_dbl_eqskp()\fR and \fBaopf_ldbl_eqskp()\fR functions assert \fIexpected\fR and \fIactual\fR floating-point numbers for equality using relative \fIreltol\fR and absolute \fIabstol\fR tolerance.

.sp
.LP
The \fBaopf_str_eqskp()\fR function asserts \fIexpected\fR and \fIactual\fR strings for equality byte-by-byte, accoring to the current machine's character set ordering.

.sp
.LP
The \fBaopf_mem_eqskp()\fR function asserts \fIexpected\fR and \fIactual\fR memory for equality, checking the first \fIn\fR blocks where a block consists of \fIsize\fR bytes (each interpreted as an \fBunsigned char\fR).

.SH RETURN VALUES
.sp
.LP
Upon successful assert operation, the \fBaopf_xx_eqskp()\fR functions return \fBAOP_PASS\fR. Otherwise, \fBAOP_SKIP\fR is returned and the assert operation is considered to be skipped. The test continues to run the remaining assert operations.

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab(@) box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPE@ATTRIBUTE VALUE
_
Interface Stability@Committed
_
MT-Level@Safe
_
Standard@None
.TE

.SH SEE ALSO
.sp
.LP
\fBaop_eqskp\fR(3C), \fBaopf_exprskp\fR(3C), \fBaopf_eq\fR(3C), \fBaopf_cmp\fR(3C), \fBaopf.h\fR(3HEAD), \fBaop.h\fR(3HEAD), \fBao.h\fR(3HEAD)

.SH NOTES
.sp
.LP
When both \fIexpected\fR and \fIactual\fR arguments are \fINULL\fR the \fBaopf_str_eqskp()\fR and \fBaopf_mem_eqskp()\fR functions return \fBAOP_PASS\fR and the assert operation is considered to be successfull.

.SH AUTHOR
Written by Ali Muhammed <uniapi@outlook.com>
.SH COPYRIGHT
Copyright (c) 2022 Asserter, Org.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the Open Software License ("\s-1OSL\s0"), Version 3.0
