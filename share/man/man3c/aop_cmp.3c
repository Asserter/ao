'\" te
.\" بسم الله
.\" Copyright (c) 2022, Asserter, Org. All Rights Reserved.
.TH aop_cmp 3c "Jul 2022" "SunOS 5.11" "C Library Functions"
.SH NAME
aop_xx_cmp \- assert operation for relation
.SH SYNOPSIS
.LP
.nf
#include <ao/aop.h>

\fBaop_t\fR \fBaop_char_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBchar\fR \fIexpected\fR, \fBchar\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_shrt_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBshort\fR \fIexpected\fR, \fBshort\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_int_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBint\fR \fIexpected\fR, \fBint\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_long_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBlong\fR \fIexpected\fR, \fBlong\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_llong_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBlong long\fR \fIexpected\fR, \fBlong long\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_uchar_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBunsigned char\fR \fIexpected\fR, \fBunsigned char\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_ushrt_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBunsigned short\fR \fIexpected\fR, \fBunsigned short\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_uint_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBunsigned int\fR \fexpected\fR, \fBunsigned int\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_ulong_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBunsigned long\fR \fIexpected\fR, \fBunsigned long\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_ullong_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBunsigned long long\fR \fIexpected\fR, \fBunsigned long long\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_size_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBsize_t\fR \fIexpected\fR, \fBsize_t\fR \fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_flt_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBfloat\fR \fIexpected\fR, \fBfloat\fR \fIactual\fR, \fBfloat\fR \fIreltol\fR, \fBfloat\fR \fIabstol\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_dbl_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBdouble\fR \fIexpected\fR, \fBdouble\fR \fIactual\fR, \fBdouble\fR \fIreltol\fR, \fBdouble\fR \fIabstol\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_ldbl_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBlong double\fR \fIexpected\fR, \fBlong double\fR \fIactual\fR,
	\fBlong double\fR \fIreltol\fR, \fBlong double\fR \fIabstol\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_str_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBconst char *\fR\fIexpected\fR, \fBconst char *\fR\fIactual\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_mem_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBconst void *\fR\fIexpected\fR, \fBconst void *\fR\fIactual\fR, \fBsize_t\fR \fIn\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBaop_t\fR \fBaop_list_cmp\fR(\fBaopmode_t\fR \fImode\fR, \fBconst void *\fR\fIexpected\fR, \fBconst void *\fR\fIactual\fR,
	\fBint\fR \fB(*\fR\fIcmp\fR)(const void *, const void *), \fBvoid *\fR\fB(*\fR\fInxt\fR)(const void *));
.fi

.SH DESCRIPTION
.sp
.LP
The \fBaop_xx_cmp()\fR functions assert the \fIexpected\fR and \fIactual\fR arguments for relation according to the \fImode\fR setting.

.sp
.LP
The \fImode\fR argument should be one of the following assert operation modes: \fBAOPMODE_NE\fR, \fBAOPMODE_EQ\fR, \fBAOPMODE_LT\fR, \fBAOPMODE_LE\fR, \fBAOPMODE_GT\fR or \fBAOPMODE_GE\fR.

.sp
.LP
The \fBaop_char_cmp()\fR and \fBaop_uchar_cmp()\fR functions assert \fIexpected\fR and \fIactual\fR characters for relation.

.sp
.LP
The \fBaop_shrt_cmp()\fR, \fBaop_int_cmp()\fR, \fBaop_long_cmp()\fR, \fBaop_llong_cmp()\fR, \fBaop_ushrt_cmp()\fR, \fBaop_uint_cmp()\fR, \fBaop_ulong_cmp()\fR, \fBaop_ullong_cmp()\fR and \fBaop_size_cmp()\fR functions assert \fIexpected\fR and \fIactual\fR integer numbers for relation.

.sp
.LP
The \fBaop_flt_cmp()\fR, \fBaop_dbl_cmp()\fR and \fBaop_ldbl_cmp()\fR functions assert \fIexpected\fR and \fIactual\fR floating-point numbers for relation using relative \fIreltol\fR and absolute \fIabstol\fR tolerance.

.sp
.LP
The \fBaop_str_cmp()\fR function asserts \fIexpected\fR and \fIactual\fR strings for relation byte-by-byte, accoring to the current machine's character set ordering.

.sp
.LP
The \fBaop_mem_cmp()\fR function asserts \fIexpected\fR and \fIactual\fR memory for relation, checking the first \fIn\fR blocks where a block consists of \fIsize\fR bytes (each interpreted as an \fBunsigned char\fR).

.sp
.LP
The \fBaop_list_cmp()\fR function asserts \fIexpected\fR and \fIactual\fR lists for relation. The \fIcmp\fR function should be supplied to assist assertion that returns zero in case of equality of items being compared and an integer greater than or less than zero if the first argument \fIexpected\fR is greater than or less than the second argument \fIactual\fR. The \fInxt\fR function should be supplied to traverse items in the list that returns a pointer to the next item or \fINULL\fR in case of no items left.
.sp

.SH RETURN VALUES
.sp
.LP
Upon successful assert operation, the \fBaop_xx_cmp()\fR functions return \fBAOP_PASS\fR. Otherwise, \fBAOP_FAIL\fR is returned and the assert operation is considered to be failed. If the assert operator mode is set to \fIAOMODE_STOP\fR the test stops immediately and the remaining assert operations are not run.

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab(@) box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPE@ATTRIBUTE VALUE
_
Interface Stability@Committed
_
MT-Level@Safe
_
Standard@None
.TE

.SH SEE ALSO
.sp
.LP
\fBaopf_cmp\fR(3C), \fBaop_cmpskp\fR(3C), \fBaop_eq\fR(3C), \fBaop.h\fR(3HEAD), \fBao.h\fR(3HEAD)

.SH NOTES
.sp
.LP
The \fBaop_str_cmp()\fR, \fBaop_mem_cmp()\fR and \fBaop_list_cmp()\fR functions have a special meaning if passed \fINULL\fR. When one of the \fIexpected\fR or \fIactual\fR arguments is \fINULL\fR the argument is considered to be less. When both arguments are \fINULL\fR the arguments are considered to be equal. Anyway the final result depends on the \fImode\fR setting.

.SH AUTHOR
Written by Ali Muhammed <uniapi@outlook.com>
.SH COPYRIGHT
Copyright (c) 2022 Asserter, Org.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the Open Software License ("\s-1OSL\s0"), Version 3.0
