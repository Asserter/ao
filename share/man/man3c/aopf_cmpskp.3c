'\" te
.\" بسم الله
.\" Copyright (c) 2022, Asserter, Org. All Rights Reserved.
.TH aopf_cmpskp 3c "7 Jul 2022" "SunOS 5.11" "C Library Functions"
.SH NAME
aopf_xx_cmpskp \- assert operation for relation or format and skip
.SH SYNOPSIS
.LP
.nf
#include <ao/aopf.h>

\fBaop_t\fR \fBaopf_char_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBchar\fR \fIexpected\fR, \fBchar\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_shrt_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBshort\fR \fIexpected\fR, \fBshort\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_int_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBint\fR \fIexpected\fR, \fBint\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_long_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBlong\fR \fIexpected\fR, \fBlong\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_llong_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBlong long\fR \fIexpected\fR, \fBlong long\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_uchar_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBunsigned char\fR \fIexpected\fR, \fBunsigned char\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ushrt_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBunsigned short\fR \fIexpected\fR, \fBunsigned short\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_uint_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBunsigned int\fR \fIexpected\fR, \fBunsigned int\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ulong_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBunsigned long\fR \fIexpected\fR, \fBunsigned long\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ullong_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBunsigned long long\fR \fIexpected\fR, \fBunsigned long long\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_size_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBsize_t\fR \fIexpected\fR, \fBsize_t\fR \fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_flt_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBfloat\fR \fIexpected\fR, \fBfloat\fR \fIactual\fR, \fBfloat\fR \fIreltol\fR, \fBfloat\fR \fIabstol\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_dbl_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBdouble\fR \fIexpected\fR, \fBdouble\fR \fIactual\fR, \fBdouble\fR \fIreltol\fR, \fBdouble\fR \fIabstol\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_ldbl_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBlong double\fR \fIexpected\fR, \fBlong double\fR \fIactual\fR,
	\fBlong double\fR \fIreltol\fR, \fBlong double\fR \fIabstol\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_str_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBconst char *\fR\fIexpected\fR, \fBconst char *\fR\fIactual\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.LP
.nf
\fBaop_t\fR \fBaopf_mem_cmpskp\fR(\fBaopcmp_t\fR \fIcmptyp\fR, \fBconst void *\fR\fIexpected\fR, \fBconst void *\fR\fIactual\fR, \fBsize_t\fR \fInblk\fR, \fBsize_t\fR \fIblksz\fR,
	\fBconst char *\fR\fIfmt\fR, \fB/*\fR \fIargs\fR*/ ...);
.fi

.fi

.SH DESCRIPTION
.sp
.LP
The \fBaopf_xx_cmpskp()\fR functions assert the \fIexpected\fR and \fIactual\fR arguments for relation according to the \fIcmptyp\fR setting. Otherwise, the functions place the \fIexpected\fR and \fIactual\fR values and the formatted output \fIfmt\fR on the standard error stream \fBstderr\fR.

.sp
.LP
The \fIcmptyp\fR argument should be one of the following assert operation compare types: \fBAOPCMP_NE\fR, \fBAOPCMP_EQ\fR, \fBAOPCMP_LT\fR, \fBAOPCMP_LE\fR, \fBAOPCMP_GT\fR or \fBAOPCMP_GE\fR.

.sp
.LP
The \fBaopf_char_cmpskp()\fR and \fBaopf_uchar_cmpskp()\fR functions assert \fIexpected\fR and \fIactual\fR characters for relation.

.sp
.LP
The \fBaopf_shrt_cmpskp()\fR, \fBaopf_int_cmpskp()\fR, \fBaopf_long_cmpskp()\fR, \fBaopf_llong_cmpskp()\fR, \fBaopf_ushrt_cmpskp()\fR, \fBaopf_uint_cmpskp()\fR, \fBaopf_ulong_cmpskp()\fR, \fBaopf_ullong_cmpskp()\fR and \fBaopf_size_cmpskp()\fR functions assert \fIexpected\fR and \fIactual\fR integer numbers for relation.

.sp
.LP
The \fBaopf_flt_cmpskp()\fR, \fBaopf_dbl_cmpskp()\fR and \fBaopf_ldbl_cmpskp()\fR functions assert \fIexpected\fR and \fIactual\fR floating-point numbers for relation using relative \fIreltol\fR and absolute \fIabstol\fR tolerance.

.sp
.LP
The \fBaopf_str_cmpskp()\fR function asserts \fIexpected\fR and \fIactual\fR strings for relation byte-by-byte, accoring to the current machine's character set ordering.

.sp
.LP
The \fBaopf_mem_cmpskp()\fR function asserts \fIexpected\fR and \fIactual\fR memory for relation, checking the first \fInblk\fR blocks where a block consists of \fIblksz\fR bytes (each interpreted as an \fBunsigned char\fR).

.SH RETURN VALUES
.sp
.LP
Upon successful assert operation, the \fBaopf_xx_cmpskp()\fR functions return \fBAOP_PASS\fR. Otherwise, \fBAOP_SKIP\fR is returned and the assert operation is considered to be skipped. The test continues to run the remaining assert operations.

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab(@) box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPE@ATTRIBUTE VALUE
_
Interface Stability@Committed
_
MT-Level@Safe
_
Standard@None
.TE

.SH SEE ALSO
.sp
.LP
\fBaopf_cmp\fR(3C), \fBaop_cmpskp\fR(3C), \fBaop_eq\fR(3C), \fBaopf.h\fR(3HEAD), \fBaop.h\fR(3HEAD), \fBao.h\fR(3HEAD)

.SH NOTES
.sp
.LP
The \fBaopf_str_cmpskp()\fR and \fBaopf_mem_cmpskp()\fR functions have a special meaning if passed \fINULL\fR. When one of the \fIexpected\fR or \fIactual\fR arguments is \fINULL\fR the argument is considered to be less. When both \fIexpected\fR and \fIactual\fR arguments are \fINULL\fR the arguments are considered to be equal. Anyway the final result depends on the \fIcmptyp\fR setting.

.SH AUTHOR
Written by Ali Muhammed <uniapi@outlook.com>
.SH COPYRIGHT
Copyright (c) 2022 Asserter, Org.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the Open Software License ("\s-1OSL\s0"), Version 3.0
